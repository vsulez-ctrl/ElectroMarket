import React, { useState, useRef } from "react";
import Form from "../components/formulario/Form";
import logo from "../assets/imagenes/ui/logo.png";
import IconsButton from "../components/layout/IconsButton";
import { Link, useNavigate } from "react-router-dom";
import { login, verificarCodigo, reenviarCodigo } from "../services/authService";
import { useAuth } from '../services/AuthContext';

export default function Login() {
  const [form, setForm] = useState({ email: "", password: "" });
  const [codigoVerificacion, setCodigoVerificacion] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);
  const [modo, setModo] = useState("login"); 
  const [usuarioPendiente, setUsuarioPendiente] = useState(null);
  const navigate = useNavigate();
  const { login: authLogin } = useAuth();

  const handleChange = (e) => {
    setForm({
      ...form,
      [e.target.name]: e.target.value,
    });
    setError("");
  };

  const handleCodigoChange = (e) => {
    setCodigoVerificacion(e.target.value);
    setError("");
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setLoading(true);

    try {
      console.log("üîÑ [LOGIN] Iniciando proceso de login...");
      const response = await login(form);
      
      console.log("üì® [LOGIN] Respuesta recibida:", response.data);
      
      if (response.data.requiereVerificacion === true) {
        console.log("üéØ [LOGIN] Cambiando a modo VERIFICACI√ìN");
        setModo("verificacion");
        setUsuarioPendiente({
          id: response.data.usuarioId,
          email: response.data.email
        });
      }  else if (response.data.token) {
        console.log("üéâ [LOGIN] Login directo exitoso");
        
        // ‚úÖ ACTUALIZAR EL CONTEXT DE AUTENTICACI√ìN
        authLogin(response.data.usuario);
        
        // ‚úÖ FORZAR NAVEGACI√ìN CON setTimeout
        setTimeout(() => {
          console.log("üîÑ [LOGIN] Navegando a /inicio...");
          window.location.href = "/inicio";
        }, 100);
        
      } else {
        throw new Error("Respuesta inesperada del servidor");
      }
      
    } catch (err) {
      console.error("‚ùå [LOGIN] Error:", err.message);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleVerificarCodigo = async (e) => {
    e.preventDefault();
    setError("");
    setLoading(true);

    try {
      console.log("üîÑ [VERIFICACI√ìN] Verificando c√≥digo...");
      const response = await verificarCodigo(usuarioPendiente.id, codigoVerificacion);
      
      console.log("‚úÖ [VERIFICACI√ìN] C√≥digo verificado:", response.data);

      if (response.data.token) {
        // ‚úÖ ACTUALIZAR EL CONTEXT DE AUTENTICACI√ìN
        authLogin(response.data.usuario);
        
        // ‚úÖ FORZAR NAVEGACI√ìN CON setTimeout
        setTimeout(() => {
          console.log("üîÑ [VERIFICACI√ìN] Navegando a /inicio...");
          window.location.href = "/inicio";
        }, 100);
        
      } else {
        throw new Error("No se recibi√≥ token despu√©s de la verificaci√≥n");
      }
      
    } catch (err) {
      console.error("‚ùå [VERIFICACI√ìN] Error:", err.message);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleReenviarCodigo = async () => {
    setError("");
    setLoading(true);

    try {
      console.log("üîÑ [REENV√çO] Reenviando c√≥digo...");
      await reenviarCodigo(usuarioPendiente.id);
      setError("‚úÖ Se ha enviado un nuevo c√≥digo a tu correo");
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const volverALogin = () => {
    setModo("login");
    setCodigoVerificacion("");
    setError("");
  };

  const Flecha = () => (
    <svg
      className="fill-current text-white"
      width="28"
      height="8"
      viewBox="0 0 28 8"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      style={{ transform: "rotate(180deg)" }}
    >
      <path
        transform="scale(1 1)"
        d="M27.3536 4.35356C27.5488 4.15829 27.5488 3.84171 27.3536 3.64645L24.1716 0.464468C23.9763 0.269206 23.6597 0.269206 23.4645 0.464468C23.2692 0.65973 23.2692 0.976313 23.4645 1.17157L26.2929 4L23.4645 6.82843C23.2692 7.02369 23.2692 7.34027 23.4645 7.53554C23.6597 7.7308 23.9763 7.7308 24.1716 7.53554L27.3536 4.35356ZM0 4.5L27 4.5L27 3.5L0 3.5L0 4.5Z"
      />
    </svg>
  );

  const fields = [
    { name: "email", type: "email", placeholder: "Correo Electr√≥nico", autocomplete: "email" },
    { name: "password", type: "password", placeholder: "Contrase√±a", autocomplete: "current-password" },
  ];

  console.log("üéØ [RENDER] Modo actual:", modo);

  if (modo === "verificacion") {
    console.log("üéØ [RENDER] Renderizando pantalla de VERIFICACI√ìN");
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-900">
        <div className="relative bg-gray-800 rounded-xl shadow-2xl p-10 w-full max-w-sm text-center">
          <img src={logo} alt="ElectroMarket" className="mb-4 w-30 h-30 mx-auto" />
          <h2 className="text-white text-xl font-semibold mb-6">Verificaci√≥n de Email</h2>
          
          <Link to="/" className="absolute top-5 left-5">
            <IconsButton Icon={Flecha} />
          </Link>

          <p className="text-gray-300 mb-4">
            Se ha enviado un c√≥digo de verificaci√≥n a:<br />
            <strong>{usuarioPendiente?.email}</strong>
          </p>

          <form onSubmit={handleVerificarCodigo} className="space-y-4">
            <input
              type="text"
              value={codigoVerificacion}
              onChange={handleCodigoChange}
              placeholder="Ingresa el c√≥digo de 6 d√≠gitos"
              className="w-full px-4 py-2 rounded-md bg-gray-900 border-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
              maxLength="6"
              disabled={loading}
              autoComplete="one-time-code"
            />

            {error && (
              <div className={`text-sm ${error.includes('‚úÖ') ? 'text-green-400' : 'text-red-500'}`}>
                {error}
              </div>
            )}

            <button
              type="submit"
              disabled={loading || codigoVerificacion.length !== 6}
              className="w-full py-2 rounded-md bg-gradient-to-r from-blue-400 to-purple-500 text-white font-semibold hover:opacity-90 transition disabled:opacity-50"
            >
              {loading ? 'Verificando...' : 'Verificar C√≥digo'}
            </button>
          </form>

          <div className="mt-4 space-y-2">
            <button
              onClick={handleReenviarCodigo}
              disabled={loading}
              className="text-blue-400 hover:underline text-sm disabled:opacity-50"
            >
              ¬øNo recibiste el c√≥digo? Reenviar
            </button>
            
            <button
              onClick={volverALogin}
              className="block text-gray-400 hover:text-white text-sm"
            >
              ‚Üê Volver al login
            </button>
          </div>
        </div>
      </div>
    );
  }

  // PANTALLA DE LOGIN NORMAL
  console.log("üéØ [RENDER] Renderizando pantalla de LOGIN");
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-900">
      <div className="relative bg-gray-800 rounded-xl shadow-2xl p-10 w-full max-w-sm text-center">
        <img src={logo} alt="ElectroMarket" className="mb-4 w-30 h-30 mx-auto" />
        <h2 className="text-white text-xl font-semibold mb-6">Iniciar Sesi√≥n</h2>
        
        <Link to="/" className="absolute top-5 left-5">
          <IconsButton Icon={Flecha} />
        </Link>

        <Form
          fields={fields}
          values={form}
          onChange={handleChange}
          onSubmit={handleSubmit}
          loading={loading}
          msg={error}
          submitText="INICIAR SESI√ìN"
        />

        <div className="mt-4 text-center">
          <Link 
            to="/recuperar" 
            className="text-blue-400 hover:underline text-sm"
          >
            ¬øOlvidaste tu contrase√±a?
          </Link>
        </div>

        {error && (
          <div className="mt-4 p-3 bg-red-900 border border-red-700 rounded-md">
            <p className="text-red-200 text-sm">{error}</p>
          </div>
        )}

        <div className="mt-6 text-gray-300 text-sm">
          ¬øNo tienes cuenta?{" "}
          <Link to="/registro" className="text-blue-400 hover:underline">
            Reg√≠strate aqu√≠
          </Link>
        </div>
      </div>
    </div>
  );
}